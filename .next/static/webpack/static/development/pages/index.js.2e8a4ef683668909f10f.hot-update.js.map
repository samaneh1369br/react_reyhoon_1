{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.2e8a4ef683668909f10f.hot-update.js","sources":["webpack:///./components/Banner_form/Banner_form.js"],"sourcesContent":["\r\nimport {createFilter} from 'react-search-input';\r\nimport cx from 'classnames';\r\nimport \"./Banner_form.css\"\r\nimport SvgSearch from \"../Svg_search/Svg_search\"\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Form  extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.submit=this.submit.bind(this);\r\n        // this.cityGet=this.cityGet.bind(this);\r\n        this.searchUpdated = this.searchUpdated.bind(this);\r\n        this.suggestedCittyBlock=React.createRef();\r\n        this.state={\r\n            city:\"\",\r\n            region:\"\",\r\n            allCityies:[],\r\n            searchTerm :'',\r\n            sugestionCity:'',\r\n            showSuggestCity: false,\r\n            showSuggestRegion: false,\r\n            allRegion:[]\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n      this.getCities();\r\n    }\r\n   \r\n\r\n    getCities = async () => {\r\n        const respond =  await fetch('https://stage.reyhoon.com/public-api/v1/cities',{method:\"GET\"});\r\n        if (respond.ok) {\r\n            const data = await respond.json();\r\n            this.setState(\r\n                {\r\n                    allCityies:data.cities\r\n                }\r\n            )\r\n        }\r\n        else {\r\n            console.error(\"https_code\"+respond.status)\r\n        }\r\n       \r\n            \r\n    }\r\n\r\n    regionGet=(e)=>{\r\n        console.log(e.target)\r\n    //     const regionTyped=e.target.value;\r\n    //     if (regionTyped.length>=4)\r\n    //    {\r\n    //        setTimeout(() => {\r\n    //             this.setState(\r\n    //                 {\r\n    //                     region:regionTyped\r\n    //                 }\r\n    //                 ,async()=>{\r\n    //                     const respond= await fetch(`https://stage.reyhoon.com/location/query?query=${this.state.region}&city=${this.state.city}`)\r\n    //                     if (respond.ok){\r\n    //                         const data= await respond.json();\r\n    //                         console.log(data)\r\n    //                         if (data.suggestions.length>0){\r\n    //                                 this.setState(\r\n    //                                     {\r\n    //                                         allRegion:data.suggestions,\r\n    //                                         showSuggestRegion:true\r\n    //                                     }\r\n    //                                 )\r\n    //                         }\r\n    //                     }\r\n    //                     else{\r\n    //                         console.error(\"https_code\"+respond.status)\r\n    \r\n    //                     }\r\n    //                 }\r\n    //             )\r\n    //         }, 2000);\r\n    //     }\r\n    }\r\n\r\n    submit=(e)=>{\r\n        e.preventDefault(); \r\n        const node = ReactDOM.findDOMNode(this);\r\n        const text1Value=e.target.querySelector(\"input[id='txt1']\").value;\r\n        const text2Value=e.target.querySelector(\"input[id='txt2']\").value;\r\n        if(text1Value&&text2Value)\r\n        {\r\n            node.querySelector(\"div[id='nullInput']\").textContent= `${this.state.city} . ${ this.state.region}`;\r\n        }\r\n        else{\r\n            const node = ReactDOM.findDOMNode(this);\r\n               node.querySelector(\"div[id='nullInput']\").textContent=\"لطفا ورودی را وارد کنید\";\r\n               console.log(\"hi\")\r\n        }\r\n    }\r\n\r\n    searchUpdated=(term)=>{\r\n        let temp=term.target.value;\r\n        if (temp.length>=2){\r\n          this.setState({searchTerm:temp});        \r\n        }\r\n    }\r\n\r\n    citySuggestedShow=()=>{\r\n        this.setState(\r\n            {\r\n                showSuggestCity: true,\r\n            }\r\n        )\r\n    }\r\n    regionSuggestedShow=()=>{\r\n        if (this.state.showSuggestRegion)\r\n        this.setState(\r\n            {\r\n               showSuggestRegion: true,\r\n            }\r\n        )\r\n    }\r\n\r\n    setCity=(citySelected)=>{\r\n        const node = ReactDOM.findDOMNode(this);\r\n        node.querySelector(\"input[id='txt2']\").focus();\r\n        this.setState(\r\n            {\r\n                city:citySelected,\r\n                showSuggestCity: false\r\n            }\r\n        )\r\n    }  \r\n\r\n    setRegion=(regionSelected)=>{\r\n        this.setState(\r\n            {\r\n                region:regionSelected,\r\n                showSuggestRegion: false\r\n            }\r\n        )\r\n    }\r\n\r\n    render(){\r\n      console.log(this.state.showSuggestRegion)\r\n          const filteredCities =this.state.allCityies.filter(createFilter(this.state.searchTerm,'name'));\r\n        return(   \r\n            <section\r\n                style={{marginBottom: '30px', marginTop:\"45px !important\"}}\r\n                className=\"header-form-section margin-v-60\"\r\n            >\r\n                <p>برای دیدن لیست رستوران‌ها و فست‌فود‌هایی که به شما سرویس می‌دهند، منطقه خود را وارد کنید.</p>\r\n                <form onSubmit={this.submit} className=\"header-form\">\r\n                    <input  \r\n                        id=\"txt1\"\r\n                        value={this.state.city}\r\n                        type=\"text\" \r\n                        onFocus={()=>this.citySuggestedShow()}  \r\n                        onChange={(e)=>this.searchUpdated(e)} \r\n                        placeholder=\"انتخاب کنید\"\r\n                        autoComplete=\"off\" \r\n                    />  \r\n                    <ul\r\n                        className={cx('citySuggested', {'showCitySuggested': this.state.showSuggestCity})}\r\n                    >\r\n                        <p>( {this.state.allCityies.length}) تحت پوشش</p>\r\n                        {\r\n                            filteredCities.map(\r\n                               (city, key)=>\r\n                                    <li\r\n                                        onClick={()=>this.setCity(city.name)}\r\n                                        key={key}>{city.name}\r\n                                    </li>\r\n                            )\r\n                        }\r\n                    </ul>  \r\n                    <div className=\"child-2\">\r\n                        <span className=\"child-2-icon\">&copy;</span>\r\n                        <input\r\n                            className=\"child-2-input\"\r\n                            autoComplete=\"off\"\r\n                            type=\"text\"\r\n                            id=\"txt2\"\r\n                            onChange={()=>{this.regionGet() ; this.regionSuggestedShow();}}\r\n                            placeholder=\"مثلا نیاوران\"\r\n                        />\r\n                    </div>\r\n                    <ul \r\n                        className={cx('regionSuggested', {'showRegionSuggested': this.state.showSuggestRegion})}\r\n                    >\r\n                        {   \r\n                           this.state.allRegion.map((regionSuggested, key)=><li key={key}  onClick={()=>this.setRegion(regionSuggested.value)}>{regionSuggested.value}</li>)\r\n                        }\r\n                    </ul>\r\n                    <button className=\"child-3\" type=\"submit\">\r\n                        <SvgSearch/>\r\n                    </button>\r\n                    \r\n                </form>\r\n                <div id=\"nullInput\"></div>\r\n\r\n            </section>\r\n           \r\n        )\r\n    }\r\n}\r\nexport default Form;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAEA;AADA;AACA;AANA;AAAA;AACA;AADA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxBA;AAyCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAzEA;AA2EA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAzFA;AA2FA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAhGA;AAkGA;AAEA;AADA;AAIA;AACA;AAxGA;AAyGA;AAGA;AADA;AAIA;AACA;AAhHA;AAkHA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AA3HA;AA6HA;AAEA;AACA;AAFA;AAKA;AACA;AAlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AANA;AAgBA;AACA;;;;;;;;;;;AAEA;AACA;;;;;;;;;;;;;;;;;AAinMA;AACA;AAoMA;;;;A","sourceRoot":""}